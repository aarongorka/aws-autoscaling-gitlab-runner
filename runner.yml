---
AWSTemplateFormatVersion: '2010-09-09'
Description: "GitLab runners Auto Scaling Group"

Parameters:
  CacheBucketName:
    Type: 'String'
    Description: |
      Name of the S3 bucket to be created to store runners cache. Leave empty to autogenerate a name.
    Default: ''
  CacheExpirationInDays:
    Type: 'Number'
    Description: |
      Number of days after which a cache item is expired. Set to 0 to disable expiration.
    MinValue: 0
    Default: 30
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: |
      ID of VPC where resources will be created.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  AMI:
    Description: "Amazon Linux 2 AMI"
    Type: AWS::EC2::Image::Id
    Default: ami-0fb7513bcdc525c3b
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  RunnerTags:
    Type: String
    Description: "JSON list of tags to add to the GitLab runner, e.g. [\"linux\", \"foo\"]"
    Default: "[]"
  GitlabUrl:
    Type: 'String'
    Description: |
      GitLab instance URL.
    Default: 'https://gitlab.com/'
  RegistrationToken:
    Type: 'String'
    Description: 'GitLab Runner **registration** token. Not to be confused with a GitLab Runner token.'
    NoEcho: true
  GitlabDockerImage:
    Type: 'String'
    Description: |
      Name of the Docker image to be used.
    Default: 'alpine:latest'
  GitlabMaxBuilds:
    Type: 'Number'
    Description: |
      Maximum number of builds before the runner is terminated.
    MinValue: 1
    Default: 10
  GitlabMaxConcurrentBuilds:
    Type: 'Number'
    Description: |
      Maximum number of concurrent builds during working hours.
    MinValue: 1
    Default: 10
  GitlabCheckInterval:
    Type: 'Number'
    Description: |
      Number of seconds how often the Runner should check GitLab for new jobs.
    MinValue: 0
    Default: 0
  MinSize:
    Description: Minimum number of instances
    Type: Number
    MinValue: 0
    MaxValue: 200
    Default: 1
  DesiredCapacity:
    Description: Initial number of instances
    Type: Number
    MinValue: 0
    MaxValue: 200
    Default: 1
  MaxSize:
    Description: Maximum number of instances
    Type: Number
    MinValue: 0
    MaxValue: 200
    Default: 100

Conditions:
  GivenBucketName: !Not [!Equals ['', !Ref 'CacheBucketName']]
  ExpireCacheObjects: !Not [!Equals [0, !Ref 'CacheExpirationInDays']]

Outputs:
  CacheBucketName:
    Description: |
      Name of created S3 bucket.
    Value: !Ref 'CacheBucket'

Resources:
  ####################################
  ### S3 Bucket for Runners' cache ###
  ####################################
  CacheBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If
        - 'GivenBucketName'
        - !Ref 'CacheBucketName'
        - !Ref 'AWS::NoValue'
      LifecycleConfiguration: !If
        - 'ExpireCacheObjects'
        - Rules:
            - Status: 'Enabled'
              ExpirationInDays: !Ref 'CacheExpirationInDays'
        - !Ref 'AWS::NoValue'

  #####################
  ### GitLab Runner ###
  #####################
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref 'VpcId'
      GroupName: !Sub '${AWS::StackName}-SecurityGroup'
      GroupDescription: 'Security group for GitLab Runners.'
      SecurityGroupIngress:
        - Description: 'SSH traffic'
          IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Policies:
        - PolicyName: Cache
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:ListObjects*'
                  - 's3:GetObject*'
                  - 's3:DeleteObject*'
                  - 's3:PutObject*'
                Resource:
                  - !Sub '${CacheBucket.Arn}/*'
              - Effect: 'Allow'
                Action:
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt 'CacheBucket.Arn'
        - PolicyName: AssumeToRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'sts:AssumeRole'
                Resource:
                  - 'arn:aws:iam::*:role/*cicd*'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref 'Role'

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref AMI
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        IamInstanceProfile:
          Arn: !GetAtt 'InstanceProfile.Arn'
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp2
              VolumeSize: 30
        SecurityGroupIds:
          - !Ref 'SecurityGroup'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -euo pipefail
            set -x
            yum install -y /opt/aws/bin/cfn-signal
            trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoscalingGroup; poweroff' ERR

            amazon-linux-extras install docker
            yum -y install make git python3 jq
            curl -sL "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
            chmod +x /usr/bin/docker-compose

            RUNNER_TOKEN="$(curl -XPOST -H 'Content-Type: application/json' -H 'Accept: application/json' -d '{"token": "${RegistrationToken}", "tag_list": ${RunnerTags}, "locked": false}' https://gitlab.com/api/v4/runners | jq -r '.token')"

            systemctl enable docker
            systemctl restart docker

            curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | bash
            yum install -y gitlab-runner

            cat <<EOF | sed "s/RUNNER_TOKEN/${!RUNNER_TOKEN}/g" > /etc/gitlab-runner/config.toml
            concurrent = ${GitlabMaxConcurrentBuilds}
            check_interval = ${GitlabCheckInterval}

            [[runners]]
              name = "${AWS::StackName}"
              token = "RUNNER_TOKEN"
              url = "https://gitlab.com/"
              executor = "docker"
              [runners.docker]
                tls_verify = false
                image = "${GitlabDockerImage}"
                privileged = true
                volumes = ["/cache"]
                shm_size = 0
              [runners.cache]
                Type = "s3"
                Shared = true
              [runners.cache.s3]
                ServerAddress = "s3.${AWS::URLSuffix}"
                BucketName = "${CacheBucket}"
                BucketLocation = "${AWS::Region}"
            EOF

            systemctl enable gitlab-runner
            systemctl restart gitlab-runner
            systemctl status gitlab-runner

            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region} || true

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinSuccessfulInstancesPercent: "80"
        # this will make it wait on the cfn-signal above before marking the instance
        # as successful
        WaitOnResourceSignals: true
        PauseTime: PT5M
        SuspendProcesses:
          - AlarmNotification
          - ScheduledActions
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
    Properties:
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      MinSize: !Ref MinSize
      MetricsCollection:
        - Granularity: "1Minute"
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: c5.xlarge
            - InstanceType: c5.large
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: True
      VPCZoneIdentifier: !Ref Subnets
